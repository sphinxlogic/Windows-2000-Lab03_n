//****************************************************************************
//  Module:     Chat2000.EXE
//  File:       MsChat.H
//              
//
//  Copyright (c) Microsoft Corporation 1995-1997
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
//****************************************************************************

#ifndef __MSCHAT_H__
#define __MSCHAT_H__


#include "globals.h"

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CMSChat wrapper class

class CMSChat : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMSChat)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xd6526fe0, 0xe651, 0x11cf, { 0x99, 0xcb, 0x0, 0xc0, 0x4f, 0xd6, 0x44, 0x97 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	// method 'QueryInterface' not emitted because of invalid return type or parameter type
	unsigned long AddRef();
	unsigned long Release();
	// method 'GetTypeInfoCount' not emitted because of invalid return type or parameter type
	// method 'GetTypeInfo' not emitted because of invalid return type or parameter type
	// method 'GetIDsOfNames' not emitted because of invalid return type or parameter type
	// method 'Invoke' not emitted because of invalid return type or parameter type
	unsigned long GetBackColor();
	void SetBackColor(unsigned long newValue);
	short GetWidth();
	void SetWidth(short nNewValue);
	short GetHeight();
	void SetHeight(short nNewValue);
	short GetUIOption();
	void SetUIOption(short nNewValue);
	short GetState();
	void SetState(short nNewValue);
	short GetBorderStyle();
	void SetBorderStyle(short nNewValue);
	short GetAppearance();
	void SetAppearance(short nNewValue);
	short GetMaxMessageLength();
	void SetMaxMessageLength(short nNewValue);
	long GetMaxHistoryLength();
	void SetMaxHistoryLength(long nNewValue);
	long GetMemberCount();
	void SetMemberCount(long nNewValue);
	long GetMaxMembers();
	void SetMaxMembers(long nNewValue);
	CString GetRating();
	void SetRating(LPCTSTR lpszNewValue);
	long GetThisParticipantID();
	void SetThisParticipantID(long nNewValue);
	CString GetThisParticipantName();
	void SetThisParticipantName(LPCTSTR lpszNewValue);
	CString GetThisParticipantAlias();
	void SetThisParticipantAlias(LPCTSTR lpszNewValue);
	CString GetRoomPath();
	void SetRoomPath(LPCTSTR lpszNewValue);
	CString GetRoomTopic();
	void SetRoomTopic(LPCTSTR lpszNewValue);
	CString GetLastMessageSent();
	void SetLastMessageSent(LPCTSTR lpszNewValue);
	CString GetLastMessageReceived();
	void SetLastMessageReceived(LPCTSTR lpszNewValue);
	CString GetHistory();
	void SetHistory(LPCTSTR lpszNewValue);
	void GetParticipantRealName(long ParticipantID, LPCTSTR Alias, BOOL Synchronous, BSTR* RealName);
	void SelectParticipants(short Selection);
	void MoveSplitBar();
	void ClearHistory();
	//AR modified to have default parms
	void EnterRoom(LPCTSTR URL, LPCTSTR RoomPassword = _T(""), LPCTSTR ThisParticipantAlias = _T("anonymous"), LPCTSTR SecurityPackage = _T("ANON"), short Flags = ENTER_FLAG_JOIN_CREATE, short Type = ENTER_TYPE_ANY_USER);
	void CancelEntering();
	void ExitRoom();
	void SetParticipantStatus(long ParticipantID, short Mask, short Status);
	void KickParticipant(long ParticipantID, LPCTSTR Comment);
	void BanParticipant(LPCTSTR Alias, BOOL Set);
	void SendMessage(const VARIANT& DestList, short Count, const VARIANT& Message);
	void AboutBox();
};

#endif // __MSCHAT_H__
