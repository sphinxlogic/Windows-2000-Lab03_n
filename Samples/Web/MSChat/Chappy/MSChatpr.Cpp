//****************************************************************************
//  Module:     Chappy.EXE
//  File:       MsChatPr.cpp
//              
//
//  Copyright (c) Microsoft Corporation 1996-1997
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
//****************************************************************************

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "mschatpr.h"

// Dispatch interfaces referenced by this interface
#include "chtitems.h"

/////////////////////////////////////////////////////////////////////////////
// CMsChatPr

IMPLEMENT_DYNCREATE(CMsChatPr, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CMsChatPr properties

/////////////////////////////////////////////////////////////////////////////
// CMsChatPr operations

long CMsChatPr::GetConnectionState()
{
	long result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMsChatPr::GetConnectionType()
{
	long result;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMsChatPr::GetOpeningChannels()
{
	long result;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CMsChatPr::GetPropertyAccessTimeOut()
{
	long result;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMsChatPr::SetPropertyAccessTimeOut(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMsChatPr::GetProcessProtocolMessages()
{
	long result;
	InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMsChatPr::SetProcessProtocolMessages(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CMsChatPr::GetConvertedString(long ConversionType, long ConversionSource, LPCTSTR Source, long PostProcess)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		ConversionType, ConversionSource, Source, PostProcess);
	return result;
}

LPDISPATCH CMsChatPr::GetChannels()
{
	LPDISPATCH result;
	InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CChatItems CMsChatPr::GetNewChatItems()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CChatItems(pDispatch);
}

long CMsChatPr::GetMaxStringLength(long StringType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		StringType);
	return result;
}

CString CMsChatPr::GetServerName()
{
	CString result;
	InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CMsChatPr::GetNickname()
{
	CString result;
	InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CChatItems CMsChatPr::GetUserProperty(LPCTSTR UserPropertyName, const VARIANT& Nickname)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		UserPropertyName, &Nickname);
	return CChatItems(pDispatch);
}

CChatItems CMsChatPr::GetChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT& ChannelName)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		ChannelPropertyName, &ChannelName);
	return CChatItems(pDispatch);
}

CChatItems CMsChatPr::GetServerProperty(LPCTSTR ServerPropertyName)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		ServerPropertyName);
	return CChatItems(pDispatch);
}

void CMsChatPr::AboutBox()
{
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMsChatPr::Connect(LPCTSTR ServerName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ServerName);
}

void CMsChatPr::Login(LPCTSTR ServerName, LPCTSTR Nickname, const VARIANT& UserName, const VARIANT& RealName, const VARIANT& Password, const VARIANT& SecurityPackages)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ServerName, Nickname, &UserName, &RealName, &Password, &SecurityPackages);
}

void CMsChatPr::Disconnect()
{
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMsChatPr::CancelConnectLogin()
{
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMsChatPr::ListChannels(LPDISPATCH ChannelQueryItems)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ChannelQueryItems);
}

void CMsChatPr::QueryChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT& ChannelName)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ChannelPropertyName, &ChannelName);
}

void CMsChatPr::KillChannel(LPCTSTR ChannelName, const VARIANT& Reason)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ChannelName, &Reason);
}

void CMsChatPr::ListUsers(LPDISPATCH UserQueryItems)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 UserQueryItems);
}

void CMsChatPr::QueryUserProperty(LPCTSTR UserPropertyName, const VARIANT& Nickname)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x63, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 UserPropertyName, &Nickname);
}

void CMsChatPr::ChangeUserProperty(LPCTSTR UserPropertyName, const VARIANT& NewUserProperty, const VARIANT& Nickname)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x64, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 UserPropertyName, &NewUserProperty, &Nickname);
}

void CMsChatPr::IgnoreUsers(LPDISPATCH UserItems, long Set)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 UserItems, Set);
}

void CMsChatPr::BanUsers(LPDISPATCH UserItems, long Set, const VARIANT& Reason, const VARIANT& Duration)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 UserItems, Set, &Reason, &Duration);
}

void CMsChatPr::KickUser(LPCTSTR Nickname, const VARIANT& Reason)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Nickname, &Reason);
}

void CMsChatPr::ChangeNickname(LPCTSTR NewNickname)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NewNickname);
}

void CMsChatPr::SetAway(long Away, const VARIANT& TextMessage)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x69, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Away, &TextMessage);
}

void CMsChatPr::QueryServerProperty(LPCTSTR ServerPropertyName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ServerPropertyName);
}

void CMsChatPr::SendInvitation(LPCTSTR Nickname, const VARIANT& ChannelName)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Nickname, &ChannelName);
}

void CMsChatPr::SendPrivateMessage(long PrivateMessageType, const VARIANT& Message, const VARIANT& RecipientNicknames, const VARIANT& DataMessageTag)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PrivateMessageType, &Message, &RecipientNicknames, &DataMessageTag);
}

void CMsChatPr::SendProtocolMessage(LPCTSTR TextMessage)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 TextMessage);
}
