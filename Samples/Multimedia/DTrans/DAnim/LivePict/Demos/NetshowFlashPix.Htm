<HTML>
<!--
These demos were written by Pete Falco and 
Jonathan Ledergerber and are property of Live Picture, Inc.

The Live Picture DXSurface was written by:
Laurent Albert
Dave Burgun
Pete Falco
Adam Freeman
Jeremy Gentile
Paul Tarantino
and is property of Live Picture, Inc.
-->
<HEAD>
<TITLE>FlashPix Surface in Direct Animation driven by NetShow (ASF audio)</TITLE>
</HEAD>

<BODY bgcolor="#FFFFFF">
<CENTER>
<p><font face="Verdana, Arial, Helvetica, sans-serif">FlashPix Surface in Direct 
  Animation driven by NetShow (ASF audio)</font></p>
<p>

<OBJECT ID="DAControl"
  STYLE="position:relative; left:0; top:0;width:390;height:465"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
 
  <SCRIPT LANGUAGE="JavaScript">

// The DirectAnimation library
   m = DAControl.PixelLibrary;

   lpsurface = new ActiveXObject("DXSurface.LivePicture.FlashPix");

   lpsurface.SourceUrl  = "bullock.fpx"; 
	lpsurface.Height = "495";
	lpsurface.Width = "390";
   result = m.ApplyDXTransform(lpsurface, null, null);

   finalImage = result.OutputBvr;

   DAControl.Image = finalImage;//m.Overlay(finalImage, m.SolidColorImage(m.Blue));
   DAControl.Start();
   
</SCRIPT>
</p>
<P>


<!-- NOTE: NETSCAPE USER, UNCOMMENT THE APPLET TAG-->

<!--<APPLET MAYSCRIPT Code="NPDS.npDSEvtObsProxy.class" Name="appObs" Width=2 Height=2></APPLET>-->
    <OBJECT ID="dxmPlayer1" WIDTH=0  HEIGHT=0
 	CLASSID="CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95">
    <PARAM NAME="_ExtentX" VALUE="8467">
    <PARAM NAME="_ExtentY" VALUE="6350">
    <PARAM NAME="ClickToPlay" VALUE="0">
    <PARAM NAME="SendMouseClickEvents" VALUE="0">
    <PARAM NAME="invokeURLs" VALUE="-1">
    <PARAM NAME="AutoStart" VALUE="-1">
    <PARAM NAME="AutoSize" VALUE="0">
    <PARAM NAME="ShowControls" VALUE="0">
    <PARAM NAME="FileName" VALUE="ChromeNetshow.asf">
   		<embed TYPE="video/x-ms-asf-plugin"
	       filename="ChromeNetshow.asf" WIDTH=252  HEIGHT=82
		SHOWCONTROLS=1 NAME=dxmPlayer1  AUTOSIZE=0
		INVOKEURLS=-1 AUTOSTART=1 CLICKTOPLAY=0></embed>

</OBJECT>

<BR>

<OBJECT ID="Scripts" WIDTH=0 HEIGHT=0
     CLASSID="CLSID:6FB71FC4-841B-11D0-B77E-00A024B6EBA7">
        <PARAM NAME="_Version" VALUE="65536">
        <PARAM NAME="_ExtentX" VALUE="2117">
        <PARAM NAME="_ExtentY" VALUE="900">
        <PARAM NAME="_StockProps" VALUE="0">
        <PARAM NAME="EnabledImage" VALUE="enabledButton1.gif">
        <PARAM NAME="DisabledImage" VALUE="disabledButton1.gif">
        <PARAM NAME="State" VALUE="0">
        <PARAM NAME="Behavior" VALUE="1">
    </OBJECT>

<!-- Implement the caption area -->

<FORM NAME="Caption">
<FONT SIZE=5  FACE="arial">
<TEXTAREA ROWS=1 COLS=70 NAME="textbox"></TEXTAREA>
</FONT>
</FORM>

<SCRIPT LANGUAGE="VBScript">

DIM strDelim

sub window_onload()
	strDelim="{"
end sub
 

Sub dxmPlayer1_Click(Button, ShiftState, x, y)

	if ( Button = 1 ) THEN
		error = Hotspot_Launch(x, y )
	end if
end sub	
Sub dxmPlayer1_ScriptCommand(bstrType, bstrParam)
	Select Case Ucase(bStrType)

	Case "GRAPHIC"
			Button_Launch(bstrParam)
	Case "OBJECT"
			Object_Launch(bstrParam)
        Case "SCRIPT"
			ShowCaption(bstrParam)
        Case "MARQUE"

	Case "URL"
			if ( dxmPlayer1.invokeURLs = 0 ) THEN 
				Launch_Url(bstrParam)
			end if
	End Select
End Sub
Sub Scripts_LClick()
	'*** react only to left mouse button
	call GenericButton_MouseDown("Scripts")
end sub
</SCRIPT>

<SCRIPT LANGUAGE="JavaScript">
/********************  JavaScript header, variable declarations  *********************/

var strDelim
var strAnnotation
var strBehaviour
var strAction
var strCatName 
var intUseSlot = 1
var intTotalSlots = 10		        //max number of active hotspots allowed = 10
var intCurrentState
var strHotspotGrid = new Array( intTotalSlots )    

var NumberofButtons = 1

/*
  // PanelList[] holds pointers to the button (or category) objects
  // ButtonList[] holds the name of buttons (or categories)
  // URLList[] holds the URL annotations of buttons
  // BehaviourList[] holds the behaviour of the button tags
 */ 

var PanelList     = new Array(NumberofButtons)	// Set array equal to the total number of buttons
var ButtonList    = new Array(NumberofButtons)	// Set array equal to the total number of buttons
var URLList       = new Array(NumberofButtons)	// Set array equal to the total number of buttons
var BehaviourList = new Array(NumberofButtons)	// Set array equal to the total number of buttons
var framenames	= new Array(50)
document.Caption.textbox.value=""


/* put empty into the array */

for (var i=0;i<intTotalSlots+1;i++)
	{
	strHotspotGrid[intUseSlot,i] = ""
	}

//------ If the browser is Netscape, then skip initalizing the ActiveX Notification buttons ----//

if (navigator.appName.indexOf("Microsoft Internet Explorer") == 0) 
	{

	/* If IE 4 then Go through all the frames and store it in an array */

	if ((navigator.appName.indexOf("Microsoft Internet Explorer") == 0) && (navigator.appVersion.indexOf("4.") == 0))
		{
		var i = parent.frames.length;
		for (var i=0;i<window.parent.frames.length;i++)
		{
		framenames[i]=window.parent.frames(i).name;
		}
	}
	PanelList[0] = Scripts
	ButtonList[0] = "Scripts"
}

//------ If the browser is Netscape, then initalize the applet and the all the events ----//

if (navigator.appName.indexOf("Microsoft Internet Explorer") !=0) 
	{
	alert ("Don't forget to uncomment the applet tag on the html page otherwise you will get a 'document.appObs has no properties.' error");
	var pluginJavaPeerRef = document.dxmPlayer1;
	document.appObs.setByProxySelectedEvents(pluginJavaPeerRef,  2097151);
	}

//---- Set up the Script command event parser ..-------//

function OnDSScriptCommandEvt(type, param)
{

  var event = type.toUpperCase();
  if ( event == "SCRIPT" ) { 
		ShowCaption(param);}
  if ( event == "URL" ) {  
	if (!document.Player1.GetInvokeURLs() ) {
		Launch_Url(param);  }
			}
  if  ( event =="OBJECT" ) {
		Object_Launch(param);}
}

function OnDSClickEvt(Button, ShiftState, x, y)
{
	if ( Button == 1 ) {
		Hotspot_Launch(x, y );
	}
}

//*************
// Check the state of the Netshow Player to make sure that we are not stopping twice 
//*************

function ControlNS( bstrCommand )
{
	if (navigator.appName.indexOf("Microsoft Internet Explorer") == 0) {
	
 		 if ( bstrCommand.toUpperCase() == "STOP" ) {
			dxmPlayer1.Stop();
 			 }
 		 else if ( bstrCommand.toUpperCase() == "PAUSE" ) {
			dxmPlayer1.Pause();
 			 }
 		 else if ( bstrCommand.toUpperCase() == "CONTINUE" ) {
			dxmPlayer1.Play();
  			}
		}
	else
		{	
 		 if ( bstrCommand.toUpperCase() == "STOP" ) {
			//document.dxmPlayer1.Stop();
			  }
 		 else if ( bstrCommand.toUpperCase() == "PAUSE" ) {
			//document.dxmPlayer1.Pause();
  			}
 		 else if ( bstrCommand.toUpperCase() == "CONTINUE" ) {
			//document.dxmPlayer1.Play();
 			 }
		}
}
		

///----------  button ( or category ) section  -----------///

function Button_Launch(bstrParam) 
{
	strAction = GrabfromParam(bstrParam,1,"{",1);
	strCatName = GrabfromParam(bstrParam,2,"{",1);
	MediaAction = GrabfromParam(bstrParam,3,"{",1);
	strAnnotation = GrabfromParam(bstrParam,4,"{",1);
	ftargetframe = GrabfromParam(strAnnotation,2,"&&",2);

	if( strAction.toUpperCase() == "ENABLE" ) {
		for( i = 0; i < NumberofButtons; i++ ) {
			if( ButtonList[i] == strCatName ) {
				PanelList[i].State = 1;
				URLList[i] = strAnnotation;
				BehaviourList[i] = MediaAction;
			}
		}
	} else {
		for( i = 0; i < NumberofButtons; i++ ) {
			if( ButtonList[i] == strCatName ) {
				PanelList[i].State = 0;
				URLList[i] = "";
				BehaviourList[i] = "";
			}
		}
	}
}

///---------- Process the Media objects(Hotspots) Clicks ----------///

function Object_Launch (bstrParam)
{
	strAction = GrabfromParam(bstrParam,1,"{",1);
	strCatName = GrabfromParam(bstrParam,2,"{",1)+GrabfromParam(bstrParam,3,"{",1)
			+GrabfromParam(bstrParam,4,"{",1);

	if  ( strAction.toUpperCase() == "ENABLE" ) {

		intUseSlot =1;
	
		while( strHotspotGrid[intUseSlot,1] != "" & intUseSlot< 10) {
			intUseSlot = intUseSlot + 1;
		}
		strHotspotGrid[intUseSlot,1] = strCatName;
		strHotspotGrid[intUseSlot,3] = GrabfromParam(bstrParam,4,"{",1);//Y1
		strHotspotGrid[intUseSlot,2] = GrabfromParam(bstrParam,5,"{",1);//X1
		strHotspotGrid[intUseSlot,5] = GrabfromParam(bstrParam,6,"{",1);//Y2
		strHotspotGrid[intUseSlot,4] = GrabfromParam(bstrParam,7,"{",1);//X2
		strHotspotGrid[intUseSlot,6] = GrabfromParam(bstrParam,2,"{",1);//Action
		strHotspotGrid[intUseSlot,7] = GrabfromParam(bstrParam,3,"{",1);//Annotate

		if (navigator.appName.indexOf("Microsoft Internet Explorer") == 0) 
			{
			dxmPlayer1.SendMouseClickEvents = true;
			dxmPlayer1.SendMouseMoveEvents = true;
			}
		else	
			{document.dxmPlayer1.SetSendMouseClickEvents(true); }

		}
	else	
		{
		for( var i = 1; i < intTotalSlots; i++ )   
			{
			if  ( GrabfromParam(bstrParam,2,"{",1)+GrabfromParam(bstrParam,3,"{",1)
				+GrabfromParam(bstrParam,4,"{",1) == strHotspotGrid[i ,1] ) 
				{
				strHotspotGrid[i,1] = "";
				strHotspotGrid[i,2] = 0;
				strHotspotGrid[i,3]= 0;
				strHotspotGrid[i,4] = 0;
				strHotspotGrid[i,5] = 0;
				strHotspotGrid[i,6] = "";
				strHotspotGrid[i,7] = "";
				}
			}
		if (navigator.appName.indexOf("Microsoft Internet Explorer") == 0) 
			{dxmPlayer1.SendMouseClickEvents= false; }
		else	
			{document.dxmPlayer1.SetSendMouseClickEvents(false); }
		}
}


function Hotspot_Launch(xx, yy) 
{
	var x = xx;
	var y = yy;
	deltax = 0 ;
	if ( navigator.appName.indexOf("Microsoft Internet Explorer") == 0  ) {  
		width = dxmPlayer1.ImageSourceWidth;
		height = dxmPlayer1.ImageSourceHeight;
		size = dxmPlayer1.DisplaySize;
		}
	else
		{
		width = document.dxmPlayer1.GetImageSourceWidth();
		height = document.dxmPlayer1.GetImageSourceWidth();
		size = document.dxmPlayer1.GetDisplaySize();
		}

	if (size == 5) {
		width = width / 2;
		height = height / 2; }

	if (size == 1) {
		width = width * 2;
		height = height * 2; }

	x= ( x *10000/width);
	y= (y *10000)/height;

	for ( var i = 1; i < intTotalSlots; i++ ) { 

		//for each hotspot enabled, check x co-ords and convert to normalized coords

		if (  x> parseInt( strHotspotGrid[i,2] ) )
		{ 
			if ( x < parseInt( strHotspotGrid[i,4] ) )
			{
			if ( y> parseInt( strHotspotGrid[i,3] ) && y < parseInt( strHotspotGrid[i,5]) )
				{
					ControlNS(strHotspotGrid[i,6]);
					Launch_Url(strHotspotGrid[i,7]);
					i = intTotalSlots +1;
				}
			}
		}
			
		}
}
///---------- Launch URL Script ----------///

function Launch_Url( bstrParam )
{
	
	var tempParam = bstrParam;
	if( bstrParam.indexOf( "&&") < 0 ) 	// if there is no target frame, use the default
		{tempParam = bstrParam+"&&"+"URLframe";}

	strAnnotation = GrabfromParam(tempParam,1,"&&",2);
	ftargetframe = GrabfromParam(tempParam,2,"&&",2);
	i = parent.frames.length;
	while( i> 0)	
		{

		//if is ie4 then

		if ((navigator.appName.indexOf("Microsoft Internet Explorer") == 0) && (navigator.appVersion.indexOf("4.") == 0))
			{
			if (eval('framenames[i-1]') == ftargetframe)
			{
				eval('parent.'+framenames[i-1]+'.location = strAnnotation'); 		
				i = 0; }			
			}
		else 
			{ // Netscape 3 & 4
			if (navigator.appName.indexOf("Microsoft Internet Explorer") !=0)
				{
				document.dxmPlayer1.LaunchURL(tempParam);
				}
			else
				{ // IE 3
				if (parent.frames[i-1].window.name == ftargetframe)	
					{
					parent.frames[i-1].window.location = strAnnotation;
					i = 0; 
					}
				}
			} 
		i= i-1;	}
	
}
/************************************************************************
 *  JavaScript footer / common functions
 ************************************************************************/

//<-----/// Parse Script Command Parameter ///----->

function GrabfromParam(strParam,intPosition,sdelim,ilen)
{
 	strElement = strParam;
	
	//only left trunc if intPosition> 1
	if( intPosition> 1 ) {
		for( var i = 2; i <= intPosition; i++ ) {
			//truncate left until at the correct position
			if (navigator.userAgent.indexOf("Mozilla")> -1 && (navigator.userAgent.indexOf("3.")> -1 || navigator.userAgent.indexOf("4.")> -1) && navigator.userAgent.indexOf("MSIE") == -1)
					{strElement = strElement.substring( strElement.indexOf(sdelim)+ilen, strElement.length() );}
				else	
					{strElement = strElement.substring( strElement.indexOf(sdelim)+ilen, strElement.length );}
		}
	}

	//it's at the correct position
	//if there is still another delimiter, truncate right

	if( strElement.indexOf( sdelim )> 0 ) {
		strElement = strElement.substring( 0, strElement.indexOf(sdelim) );
	}

	return strElement;
}


// *************
// This is a generic button subroutine. The routine checks to see if the button
// is active and turns on the graphic.
// *************

function GenericButton_MouseDown( strButtonName )
{
	for( var i = 0; i < NumberofButtons; i++ ) {
		if( ButtonList[i] == strButtonName ) {
			if( PanelList[i].State == 1 ) {
				ControlNS( BehaviourList[i] );
				Launch_Url( URLList[i] );
			}
		}
	}
}


///---------- The following function implements the change in the caption area. ------///

function ShowCaption(cValue)
		{
	strValue = GrabfromParam(cValue,2,"{",1);
	strValue = GrabfromParam(strValue,1,"&&",2); //this is for frame target
	document.Caption.textbox.value=strValue;
	//This is where the FlashPix Surface gets called
	//cValue: .25,.45,.35,.75&&URLframe
	
	//alert(strValue);
	
	
	x1 = parseFloat(strValue.substring(0,4));
	x2 = parseFloat(strValue.substring(5,9));
	y1 = parseFloat(strValue.substring(10,14));
	y2 = parseFloat(strValue.substring(15,19));

	//alert(strValue.substring(0,4));
	//alert(strValue.substring(5,9));
	//alert(strValue.substring(10,14));
	//alert(strValue.substring(15,19));
	
	lpsurface.TopLeft_RI_x = x1;
	lpsurface.TopLeft_RI_y = y1;
	lpsurface.BottomRight_RI_x = x2;
	lpsurface.BottomRight_RI_y = y2;
	
}

</SCRIPT>

</CENTER>

</BODY>
</HTML>

