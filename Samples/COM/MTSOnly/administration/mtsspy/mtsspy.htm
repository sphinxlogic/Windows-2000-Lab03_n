<html>

<head>
<title>Spy</title>
<link rel="stylesheet" href="../../styles.css" type="text/css">
<style>
A:link {color: Olive}
A:visited {color: 336666}
A:hover {background:Olive; color: White}
</style>
</head>

<body>

<h2>Spy (MTS)</h2>

<hr>

<p>MTS Event Sinks allow clients to receive notifications for a variety of MTS events. You
can use MTS Event Sinks to build your own MTS monitoring and logging programs. The COM
SDK provides a sample program, Spy, which displays and logs MTS events.</p>

<p>A MTS Event Sink is an ActiveX component (in-process or local) that can be installed
on a computer running Microsoft Transaction Server to receive various events as they occur
in the Transaction Server run-time environment. 

<ul>
  <li>Package startup and shutdown </li>
  <li>Object creation and release </li>
  <li>Object references, consistency, activation, and deactivation </li>
  <li>Method call, return, and exceptions </li>
  <li>Transaction startup, preparing to commit, and abort </li>
  <li>Resource dispenser connection, allocation, and recycling </li>
  <li>Thread allocation and recycling </li>
</ul>

<p>Spy displays what is going on inside an MTS process, such as transaction events,
thread events, resource events, object, method, and user events. To use the auditing
feature, you must create an ODBC DSN named &quot;MTSAudit&quot; that connects to your SQL
Server database.</p>

<p>Spy implements notification sinks for the various MTS Event interfaces. These
interfaces encapsulate areas of MTS functionality such as transactions, threading, and
activation. See the Reference topic for more information. Spy receives notifications from
the MTSEvents DLL. MTSEvents receives events from the MTS Executive and maintains an
event queue. Event notifications are then dispatched to listeners. </p>

<p>When events are enabled through the registry key setting, you will incur a performance
cost of an extra method call per event and the memory needed to allocate the event.
MTSEvents does not guarantee the delivery of an event; see the IUserInfo reference topic
for more information. Every event has a timestamp. This is the time when the event was
added to the queue, not the time that it was dispatched or received. </p>
<b>

<p>Important</b> </p>

<p>You cannot use a MTS Event Sink to affect the state of a running server process. You
should never call into an object returned by a MTS Event Sink. They are not intended for
application-specific initialization work. </p>

<h4>Project Files</h4>

<table border="0" width="75%" cellspacing="3" cellpadding="2">
  <tr>
    <td><strong>Folder Name</strong></td>
    <td width="74%"><strong>Description</strong></td>
  </tr>
 <tr>
    <td><A HREF="Proxystub/">mtsspy\Proxystub</A> </td>
    <td width="74%">MTS Proxy stub files (build first)</td>
  </tr>
   <tr>
    <td><A HREF="Inc/">mtsspy\Inc</A> </td>
    <td width="74%">MTS Include files (build after Proxy stub files)</td>
  </tr>

   <tr>
    <td><A HREF="MtsAudit/">mtsspy\MtsAudit</A> </td>
    <td width="74%">An auditing mechanism for Spy</td>
  </tr>
  <tr>
    <td><A HREF="MtsSpy/">mtsspy\MtsSpy</A></td>
    <td width="74%">Executable for Spy</td>
  </tr>
  <tr>
    <td><A HREF="MtsSpyCtl/">mtsspy\MtsSpyCtl</A></td>
    <td width="74%">A sample application that shows how to set upevent sinks to
    &quot;spy&quot; on MTS</td>
  </tr>
  <tr>
    <td><A HREF="MtsUserEventObj/">mtsspy\MtsUserEventObj</A>&nbsp; </td>
    <td width="74%">A sample implementation of a User event object</td>
  </tr>
</table>

<h4>Build Notes</h4>

<p>To enable events you must have the default value in the following key set to:</p>

<p>\HKEY_LOCAL_MACHINE\Software\Microsoft\Transaction
Server\Extender\{6F9E4BD0-7970-11D0-B16C-00AA00BA3258}  </p>

<b>IMPORTANT</b>

<p>You must build the Spy sample in a certain order in order to compile properly. You must
build and register the <A HREF="Proxystub/">MtsSdkPs</a> files first, and then build the <A HREF="Inc/">Inc</a> files in order to
generate the correct header files for the remainder of the sample files. After you build
and register the MtsSdkPs and Inc file, you can build and register the remaining sample
files in any order.</p>
<b>

<p>To run Spy</b> 

<ol>
  <li>Build the MTS Spy executable using the spy.dsw Visual C++ project workspace. </li>
  <li>Set the active project to MtsSpy and then rebuild all. </li>
  <li>Run MTSSpy.exe. </li>
  <li>If you would like to log events to a file, choose Log to File from the Options menu and
    specify the name of a log file. </li>
  <li>Choose Select Packages from the Spy menu. If no Transaction Server processes are
    running, only the System package will be available. </li>
  <li>Choose a package from the Running Packages list box. </li>
  <li>Select items from the Possible Events list box. Click the forward arrow to move events
    to the Current Events list box. </li>
  <li>Click Enable Events. Events in the Current Events list box will be displayed by Spy. </li>
  <li>Click OK. Spy will display events as they are received. </li>
</ol>

<p>&nbsp;</p>

<hr>

<p>&nbsp;</p>
</body>
</html>
