<HTML>
<!--
These demos were written by Pete Falco and 
Jonathan Ledergerber and are property of Live Picture, Inc.

The Live Picture DXSurface was written by:
Laurent Albert
Dave Burgun
Pete Falco
Adam Freeman
Jeremy Gentile
Paul Tarantino
and is property of Live Picture, Inc.
-->
<HEAD>
<TITLE>FlashPix Surface in DA</TITLE>
</HEAD>

<BODY bgcolor="#FFFFFF">
<CENTER>
<p><font face="Verdana, Arial, Helvetica, sans-serif">Pan &amp; Zoom a FlashPix image in Direct 
  Animation</font></p>
<P>
<OBJECT ID="DAControl"
  STYLE="position:relative; left:0; top:0;width:290;height:338"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT> </p>

<table border="0" width="150">
  <tr bgcolor="#006699"> 
    <td width="77">&nbsp;</td>
    <td width="63">&nbsp;</td>
    <td width="61">&nbsp;</td>
    <td width="64">&nbsp;</td>
    <td bgcolor="#99CCFF">&nbsp;</td>
    <td width="54"><a href="#" onclick="PanUp()"><img src="images/pan_up.gif" width="25" height="24" border="0" alt=""></a></td>
    <td bgcolor="#99CCFF">&nbsp;</td>
  </tr>
  <tr> 
    <td width="77"><a href="http://www.livepicture.com" target="_new"><img src="images/runner.gif" width="24" height="24" border="0" alt=""></a></td>
    <td width="63"><a href="#" onclick="ZoomIn()"><img src="images/zoom_in.gif" width="25" height="24" border="0" alt=""></a></td>
    <td width="61"><a href="#" onclick="ZoomOut()"><img src="images/zoom_out.gif" width="25" height="24" border="0" alt=""></a></td>
    <td width="64"><a href="#" onclick="InitialView()"><img src="images/initial_view.gif" width="25" height="24" border="0" alt=""></a></td>
    <td bgcolor="#99CCFF"><a href="#" onclick="PanLeft()"><img src="images/pan_left.gif" width="25" height="24" border="0" alt=""></a></td>
    <td width="54"><img src="images/pan.gif" width="25" height="24" alt=""></td>
    <td bgcolor="#99CCFF"><a href="#" onclick="PanRight()"><img src="images/pan_right.gif" width="25" height="24" border="0" alt=""></a></td>
  </tr>
  <tr bgcolor="#006699"> 
    <td width="77" height="16">&nbsp;</td>
    <td width="63" height="16">&nbsp;</td>
    <td width="61" height="16">&nbsp;</td>
    <td width="64" height="16">&nbsp;</td>
    <td bgcolor="#99CCFF" height="16">&nbsp;</td>
    <td width="54" height="16"><a href="#" onclick="PanDown()"><img src="images/pan_down.gif" width="25" height="24" border="0" alt=""></a></td>
    <td bgcolor="#99CCFF" height="16">&nbsp;</td>
  </tr>
</table>
<P>
<SCRIPT LANGUAGE="JavaScript">

  // The DirectAnimation library
   m = DAControl.PixelLibrary;

   lpsurface = new ActiveXObject("DXSurface.LivePicture.FlashPix");
   lpsurface.Width=290;
   lpsurface.height=338;
   lpsurface.SourceUrl = "dentontx.fpx"; 

   result = m.ApplyDXTransform(lpsurface, null, null);

   finalImage = result.OutputBvr;

   DAControl.Image = finalImage;
   DAControl.Start();

ZoomFlag = 1;

//Get initial width and height from style
iWidth = 420; 
iHeight = 540;
//
//Set Pan distance
tStepX = 50/iWidth;   
tStepY = 50/iHeight;  

//Get initial texture coordinates (usually 0,0 and 1,1) for InitialView()
iTopLeft_RI_x = lpsurface.TopLeft_RI_x;
iTopLeft_RI_y = lpsurface.TopLeft_RI_y;
iBottomRight_RI_x = lpsurface.BottomRight_RI_x
iBottomRight_RI_y = lpsurface.BottomRight_RI_y;
//
//Assign temp texture coordinates
tTopLeft_RI_x = iTopLeft_RI_x;
tTopLeft_RI_y = iTopLeft_RI_y;
tBottomRight_RI_x = iBottomRight_RI_x;
tBottomRight_RI_y = iBottomRight_RI_y;


function ZoomIn() {

	//lpsurface.SourceUrl = tImage;

	//Get temp texture coordinates
	tTopLeft_RI_x = lpsurface.TopLeft_RI_x;
	tTopLeft_RI_y = lpsurface.TopLeft_RI_y;
	tBottomRight_RI_x = lpsurface.BottomRight_RI_x;
	tBottomRight_RI_y = lpsurface.BottomRight_RI_y;
	
	//Calc Zoom Factor
	tZoomX = (((tBottomRight_RI_x)-(tTopLeft_RI_x))/4);
	tZoomY = (((tBottomRight_RI_y)-(tTopLeft_RI_y))/4);
	
	//Calculate and Set new texture coordinates for DRAW
	lpsurface.TopLeft_RI_x = (tTopLeft_RI_x + tZoomX);
	lpsurface.TopLeft_RI_y = (tTopLeft_RI_y + tZoomY);
	lpsurface.BottomRight_RI_x = (tBottomRight_RI_x - tZoomX);
	lpsurface.BottomRight_RI_y = (tBottomRight_RI_y - tZoomY);
	
	ZoomFlag = ZoomFlag * 2;
	
//displayTexCoords();//
}


function ZoomOut() {

	//lpsurface.SourceUrl = tImage;
	
	if (ZoomFlag> 1.5) {

	ZoomFlag = ZoomFlag / 2;

	//Get temp texture coordinates
	tTopLeft_RI_x = lpsurface.TopLeft_RI_x;
	tTopLeft_RI_y = lpsurface.TopLeft_RI_y;
	tBottomRight_RI_x = lpsurface.BottomRight_RI_x;
	tBottomRight_RI_y = lpsurface.BottomRight_RI_y;
	
	//Calc Zoom Factor for next Zoom
	tZoomX = (((tBottomRight_RI_x)-(tTopLeft_RI_x))/2);
	tZoomY = (((tBottomRight_RI_y)-(tTopLeft_RI_y))/2);
	
	//Calculate and Set new texture coordinates for DRAW
	tTopLeft_RI_x = (tTopLeft_RI_x - tZoomX);
	tTopLeft_RI_y = (tTopLeft_RI_y - tZoomY);
	tBottomRight_RI_x = (tBottomRight_RI_x + tZoomX);
	tBottomRight_RI_y = (tBottomRight_RI_y + tZoomY);

	//Clampers: PanLeft, PanRight, PanUp, PanDown
	if (tTopLeft_RI_x < 0) {
		tBottomRight_RI_x = tBottomRight_RI_x - tTopLeft_RI_x;
		tTopLeft_RI_x = 0;
	}
	if (tBottomRight_RI_x> 1) {
		tTopLeft_RI_x = tTopLeft_RI_x -(tBottomRight_RI_x - 1);
		tBottomRight_RI_x = 1;
	}
	if (tTopLeft_RI_y < 0) {
		tBottomRight_RI_y = tBottomRight_RI_y - tTopLeft_RI_y;
		tTopLeft_RI_y = 0;
	}
	if (tBottomRight_RI_y> 1) {
		tTopLeft_RI_y = tTopLeft_RI_y - (tBottomRight_RI_y - 1);
		tBottomRight_RI_y = 1;
	}
	
	//Calculate and Set new texture coordinates for DRAW
	lpsurface.TopLeft_RI_x = tTopLeft_RI_x;
	lpsurface.TopLeft_RI_y = tTopLeft_RI_y;
	lpsurface.BottomRight_RI_x = tBottomRight_RI_x;
	lpsurface.BottomRight_RI_y = tBottomRight_RI_y;
	
//displayTexCoords();//
	
	}
}


function PanLeft() {

	//lpsurface.SourceUrl = tImage;

	//Get temp texture coordinates
	tTopLeft_RI_x = lpsurface.TopLeft_RI_x;
	tBottomRight_RI_x = lpsurface.BottomRight_RI_x;
	
	//Calculate (potentially) new texture coordinates
	tTopLeft_RI_x = (tTopLeft_RI_x - tStepX);
	tBottomRight_RI_x = (tBottomRight_RI_x - tStepX);

	//Clamper
	if (tTopLeft_RI_x < 0) {
		//debugWindow.document.write("Can't Pan!");
		//debugWindow.document.write("<P>");
		lpsurface.BottomRight_RI_x = tBottomRight_RI_x - tTopLeft_RI_x;
		lpsurface.TopLeft_RI_x = 0;
	}
	else {
		lpsurface.BottomRight_RI_x = tBottomRight_RI_x;
		lpsurface.TopLeft_RI_x = tTopLeft_RI_x;
	}
	
//displayTexCoords();//
}


function PanRight() {

	//lpsurface.SourceUrl = tImage;

	//Get temp texture coordinates
	tTopLeft_RI_x = lpsurface.TopLeft_RI_x;
	tBottomRight_RI_x = lpsurface.BottomRight_RI_x;
	
	//Calculate (potentially) new texture coordinates
	tTopLeft_RI_x = (tTopLeft_RI_x + tStepX);
	tBottomRight_RI_x = (tBottomRight_RI_x + tStepX);
	
	
	//Clamper
	if (tBottomRight_RI_x> 1) {
		//debugWindow.document.write("Can't Pan!"); //
		//debugWindow.document.write("<P>"); //
		lpsurface.TopLeft_RI_x = tTopLeft_RI_x -(tBottomRight_RI_x - 1);
		lpsurface.BottomRight_RI_x = 1;
	}
	else {
		lpsurface.TopLeft_RI_x = (tTopLeft_RI_x + tStepX);
		lpsurface.BottomRight_RI_x = (tBottomRight_RI_x + tStepX);
	}
	//displayTexCoords(); //
}


function PanUp() {

	//lpsurface.SourceUrl = tImage;

	//Get temp texture coordinates
	tTopLeft_RI_y = lpsurface.TopLeft_RI_y;
	tBottomRight_RI_y = lpsurface.BottomRight_RI_y;

	//Calculate (potentially) new texture coordinates
	tTopLeft_RI_y = (tTopLeft_RI_y - tStepY);
	tBottomRight_RI_y = (tBottomRight_RI_y - tStepY);

	//Clamper
	if (tTopLeft_RI_y < 0) {
		//debugWindow.document.write("Can't Pan!"); //
		//debugWindow.document.write("<P>"); //
		lpsurface.BottomRight_RI_y = tBottomRight_RI_y - tTopLeft_RI_y;
		lpsurface.TopLeft_RI_y = 0;
	}
	else {
		lpsurface.BottomRight_RI_y = tBottomRight_RI_y;
		lpsurface.TopLeft_RI_y = tTopLeft_RI_y;
	}

	//displayTexCoords(); //
}


function PanDown() {

	//lpsurface.SourceUrl = tImage;

	//Get temp texture coordinates
	tTopLeft_RI_y = lpsurface.TopLeft_RI_y;
	tBottomRight_RI_y = lpsurface.BottomRight_RI_y;

	//Calculate (potentially) new texture coordinates
	tTopLeft_RI_y = (tTopLeft_RI_y + tStepY);
	tBottomRight_RI_y = (tBottomRight_RI_y + tStepY);

	//Clamper
	if (tBottomRight_RI_y> 1) {
		//debugWindow.document.write("Can't Pan!"); //
		//debugWindow.document.write("<P>"); //
		lpsurface.TopLeft_RI_y = tTopLeft_RI_y - (tBottomRight_RI_y - 1);
		lpsurface.BottomRight_RI_y = 1;
	}
	else {
		lpsurface.TopLeft_RI_y = (tTopLeft_RI_y + tStepY);
		lpsurface.BottomRight_RI_y = (tBottomRight_RI_y + tStepY);
	}
	//displayTexCoords(); //
}


function InitialView() {

	//lpsurface.SourceUrl = tImage;
	
	lpsurface.TopLeft_RI_x = iTopLeft_RI_x;
	lpsurface.TopLeft_RI_y = iTopLeft_RI_y;
	lpsurface.BottomRight_RI_x = iBottomRight_RI_x;
	lpsurface.BottomRight_RI_y = iBottomRight_RI_y;
	
	//displayTexCoords();
}



//debug display
function displayTexCoords() {
	debugWindow.document.write("TopLeft_RI_x: ");
	debugWindow.document.write(lpsurface.TopLeft_RI_x);
	debugWindow.document.write("<P>");
	debugWindow.document.write("TopLeft_RI_y: ");
	debugWindow.document.write(tTopLeft_RI_y = lpsurface.TopLeft_RI_y);
	debugWindow.document.write("<P>");
	debugWindow.document.write("BottomRight_RI_x: ");
	debugWindow.document.write(tBottomRight_RI_x = lpsurface.BottomRight_RI_x);
	debugWindow.document.write("<P>");
	debugWindow.document.write("BottomRight_RI_y: ");
	debugWindow.document.write(tBottomRight_RI_y = lpsurface.BottomRight_RI_y);
	debugWindow.document.write("<P>");
	debugWindow.document.write("<HR>");
	debugWindow.document.write("<P>");
}


</SCRIPT>
</CENTER>
</BODY>
</HTML>

