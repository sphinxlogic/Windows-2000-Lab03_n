//****************************************************************************
//  Module:     Chappy.EXE
//  File:       MsChatPr.H
//              
//
//  Copyright (c) Microsoft Corporation 1996-1997
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
//****************************************************************************

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CChatItems;

/////////////////////////////////////////////////////////////////////////////
// CMsChatPr wrapper class

class CMsChatPr : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMsChatPr)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x39397c0, 0x46df, 0x11d0, { 0x99, 0xcb, 0x0, 0xc0, 0x4f, 0xd6, 0x44, 0x97 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	long GetConnectionState();
	long GetConnectionType();
	long GetOpeningChannels();
	long GetPropertyAccessTimeOut();
	void SetPropertyAccessTimeOut(long nNewValue);
	long GetProcessProtocolMessages();
	void SetProcessProtocolMessages(long nNewValue);
	CString GetConvertedString(long ConversionType, long ConversionSource, LPCTSTR Source, long PostProcess);
	LPDISPATCH GetChannels();
	CChatItems GetNewChatItems();
	long GetMaxStringLength(long StringType);
	CString GetServerName();
	CString GetNickname();
	CChatItems GetUserProperty(LPCTSTR UserPropertyName, const VARIANT& Nickname);
	CChatItems GetChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT& ChannelName);
	CChatItems GetServerProperty(LPCTSTR ServerPropertyName);
	void AboutBox();
	void Connect(LPCTSTR ServerName);
	void Login(LPCTSTR ServerName, LPCTSTR Nickname, const VARIANT& UserName, const VARIANT& RealName, const VARIANT& Password, const VARIANT& SecurityPackages);
	void Disconnect();
	void CancelConnectLogin();
	void ListChannels(LPDISPATCH ChannelQueryItems);
	void QueryChannelProperty(LPCTSTR ChannelPropertyName, const VARIANT& ChannelName);
	void KillChannel(LPCTSTR ChannelName, const VARIANT& Reason);
	void ListUsers(LPDISPATCH UserQueryItems);
	void QueryUserProperty(LPCTSTR UserPropertyName, const VARIANT& Nickname);
	void ChangeUserProperty(LPCTSTR UserPropertyName, const VARIANT& NewUserProperty, const VARIANT& Nickname);
	void IgnoreUsers(LPDISPATCH UserItems, long Set);
	void BanUsers(LPDISPATCH UserItems, long Set, const VARIANT& Reason, const VARIANT& Duration);
	void KickUser(LPCTSTR Nickname, const VARIANT& Reason);
	void ChangeNickname(LPCTSTR NewNickname);
	void SetAway(long Away, const VARIANT& TextMessage);
	void QueryServerProperty(LPCTSTR ServerPropertyName);
	void SendInvitation(LPCTSTR Nickname, const VARIANT& ChannelName);
	void SendPrivateMessage(long PrivateMessageType, const VARIANT& Message, const VARIANT& RecipientNicknames, const VARIANT& DataMessageTag);
	void SendProtocolMessage(LPCTSTR TextMessage);
};
